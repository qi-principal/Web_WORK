{"ast":null,"code":"import axios from 'axios';\nimport router from \"@/router\";\n\n// 创建可一个新的axios对象\nconst request = axios.create({\n  baseURL: process.env.VUE_APP_BASEURL,\n  // 后端的接口地址  ip:port\n  timeout: 30000 // 30s请求超时\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\n// request.interceptors.request.use(config => {\n//     config.headers['Content-Type'] = 'application/json;charset=utf-8';        // 设置请求头格式\n//     let user = JSON.parse(localStorage.getItem(\"xm-user\") || '{}')  // 获取缓存的用户信息\n//     config.headers['token'] = user.token  // 设置请求头\n//\n//     return config\n// }, error => {\n//     console.error('request error: ' + error) // for debug\n//     return Promise.reject(error)\n// });\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  return res;\n}, error => {\n  console.error('response error: ' + error); // for debug\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","request","create","baseURL","process","env","VUE_APP_BASEURL","timeout","interceptors","response","use","res","data","JSON","parse","error","console","Promise","reject"],"sources":["D:/作业/shopping-manager/vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport router from \"@/router\";\r\n\r\n// 创建可一个新的axios对象\r\nconst request = axios.create({\r\n    baseURL: process.env.VUE_APP_BASEURL,   // 后端的接口地址  ip:port\r\n    timeout: 30000                          // 30s请求超时\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\n// request.interceptors.request.use(config => {\r\n//     config.headers['Content-Type'] = 'application/json;charset=utf-8';        // 设置请求头格式\r\n//     let user = JSON.parse(localStorage.getItem(\"xm-user\") || '{}')  // 获取缓存的用户信息\r\n//     config.headers['token'] = user.token  // 设置请求头\r\n//\r\n//     return config\r\n// }, error => {\r\n//     console.error('request error: ' + error) // for debug\r\n//     return Promise.reject(error)\r\n// });\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.error('response error: ' + error) // for debug\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n\r\nexport default request"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU;;AAE7B;AACA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM,CAAC;EACzBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,eAAe;EAAI;EACxCC,OAAO,EAAE,KAAK,CAA0B;AAC5C,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACAN,OAAO,CAACO,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC7BD,QAAQ,IAAI;EACR,IAAIE,GAAG,GAAGF,QAAQ,CAACG,IAAI;;EAEvB;EACA,IAAI,OAAOD,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGE,IAAI,CAACC,KAAK,CAACH,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA,OAAOA,GAAG;AACd,CAAC,EACDI,KAAK,IAAI;EACLC,OAAO,CAACD,KAAK,CAAC,kBAAkB,GAAGA,KAAK,CAAC,EAAC;EAC1C,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAChC,CACJ,CAAC;AAGD,eAAed,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}